package field

// ---- auto generated by baseTypeBuilder_test.go, NOT modify this file ----

import (
	"github.com/findyu001/go-db-mongo/mongodb/filter"
	"github.com/findyu001/go-db-mongo/mongodb/updater"
	"go.mongodb.org/mongo-driver/bson"
)

type Fields0F struct {
	*Fields0FUpdaterF
	*baseKey
	*Fields0FFilterF
}

func (a *Fields0F) FullName() string {
	return a.baseKey.FullName()
}

type Fields0FUpdaterF struct {
	*baseUpdater
}

type Fields0FFilterF struct {
	*baseFilter
}

func NewFields0F(fName string) *Fields0F {
	uper := &Fields0FUpdaterF{&baseUpdater{&base{fName}}}
	pri := &baseKey{uper.base}
	flt := &Fields0FFilterF{&baseFilter{uper.base}}

	return &Fields0F{uper, pri, flt}
}

func (i *Fields0FFilterF) Mod(divisor, remainder Fields) filter.Filter {
	return filter.New(i, "$mod", bson.A{divisor, remainder})
}

func (i *Fields0FUpdaterF) Inc(num Fields) updater.Updater {
	return updater.New(i, "$inc", num)
}

func (i *Fields0FUpdaterF) Mul(num Fields) updater.Updater {
	return updater.New(i, "$mul", num)
}

func (i *Fields0FFilterF) Eq(value Fields) filter.Filter {
	return filter.CompareByValue(i, filter.EQ, value)
}

func (i *Fields0FFilterF) Ne(value Fields) filter.Filter {
	return filter.CompareByValue(i, filter.NE, value)
}

func (i *Fields0FFilterF) NeField(f *Fields0F) filter.Filter {
	return filter.CompareByField(i, filter.NE, f)
}

func (i *Fields0FFilterF) EqField(f *Fields0F) filter.Filter {
	return filter.CompareByField(i, filter.EQ, f)
}

func (i *Fields0FFilterF) Gte(value Fields) filter.Filter {
	return filter.CompareByValue(i, filter.GTE, value)
}

func (i *Fields0FFilterF) Lte(value Fields) filter.Filter {
	return filter.CompareByValue(i, filter.LTE, value)
}

func (i *Fields0FFilterF) GteField(f *Fields0F) filter.Filter {
	return filter.CompareByValue(i, filter.GTE, f)
}

func (i *Fields0FFilterF) LteField(f *Fields0F) filter.Filter {
	return filter.CompareByValue(i, filter.LTE, f)
}

func (i *Fields0FFilterF) Gt(value Fields) filter.Filter {
	return filter.CompareByValue(i, filter.GT, value)
}

func (i *Fields0FFilterF) Lt(value Fields) filter.Filter {
	return filter.CompareByValue(i, filter.LT, value)
}

func (i *Fields0FFilterF) GtField(f *Fields0F) filter.Filter {
	return filter.CompareByValue(i, filter.GT, f)
}

func (i *Fields0FFilterF) LtField(f *Fields0F) filter.Filter {
	return filter.CompareByValue(i, filter.LT, f)
}

func (i *Fields0FFilterF) In(values []Fields) filter.Filter {
	return filter.New(i, "$in", values)
}

func (i *Fields0FFilterF) Nin(values []Fields) filter.Filter {
	return filter.New(i, "$nin", values)
}

func (i *Fields0FUpdaterF) Min(value Fields) updater.Updater {
	return updater.New(i, "$min", value)
}

func (i *Fields0FUpdaterF) Max(value Fields) updater.Updater {
	return updater.New(i, "$max", value)
}

func (i *Fields0FUpdaterF) Set(value Fields) updater.Updater {
	return updater.New(i, "$set", value)
}

func (i *Fields0FUpdaterF) SetOnIns(value Fields) updater.Updater {
	return updater.New(i, "$setOnInsert", value)
}
