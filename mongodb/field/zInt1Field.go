package field

// ---- auto generated by builder.go, NOT modify this file ----

import (
	fmt "fmt"
	filter "github.com/findyu001/go-db-mongo/mongodb/filter"
	updater "github.com/findyu001/go-db-mongo/mongodb/updater"
	bson "go.mongodb.org/mongo-driver/bson"
)

type Int1Field struct {
	*Array
}

func NewInt1Field(fName string) *Int1Field {
	return &Int1Field{NewArray(fName)}
}

func (i *Int1Field) EleAt(index int) *Int0F {
	return NewInt0F(fmt.Sprintf("%s.%d", i.FullName(), index))
}

// 数组的某一个元素，有时也可以理解为 数组的任何一个元素
func (i *Int1Field) EleOne() *Int0F {
	return NewInt0F(i.FullName())
}

// update 操作中被filter匹配的那第一个元素
func (i *Int1Field) EleThat() *Int0FUpdaterF {
	return NewInt0F(i.FullName() + ".$").Int0FUpdaterF
}

func (i *Int1Field) EleAll() *Int0FUpdaterF {
	return NewInt0F(i.FullName() + ".$[]").Int0FUpdaterF
}

func (i *Int1Field) EleByFid(identifier string) *Int0FUpdaterF {
	return NewInt0F(fmt.Sprintf("%s.$[%s]", i.FullName(), i.FullName()+identifier)).Int0FUpdaterF
}

func (i *Int1Field) DeclFid(identifier string) *Int0FFilterF {
	return NewInt0F(i.FullName() + identifier).Int0FFilterF
}

func (i *Int1Field) Include(a []int) filter.Filter {
	return filter.New(i, "$all", a)
}

func (i *Int1Field) Eq(a []int) filter.Filter {
	return filter.CompareByValue(i, filter.EQ, a)
}

func (i *Int1Field) Set(a []int) updater.Updater {
	return updater.New(i, "$set", a)
}

func (i *Int1Field) AddToSet(value int) updater.Updater {
	return updater.New(i, "$addToSet", value)
}

func (i *Int1Field) AddToSetValues(a []int) updater.Updater {
	return updater.New(i, "$addToSet", bson.M{"$each": a})
}

func (i *Int1Field) Pull(value int) updater.Updater {
	return updater.New(i, "$pull", value)
}

func (i *Int1Field) PullAll(a []int) updater.Updater {
	return updater.New(i, "$pullAll", a)
}

func (i *Int1Field) Push(value int) updater.Updater {
	return updater.New(i, "$push", value)
}

func (i *Int1Field) PushByModifier(m updater.PushModifier, each []int) updater.Updater {
	return updater.PushByModifier(i, m, each)
}
