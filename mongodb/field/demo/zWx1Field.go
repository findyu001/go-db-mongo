
package demo

// ---- auto generated by builder.go, NOT modify this file ----

import (
  fmt "fmt"
  field "github.com/xpwu/go-db-mongo/mongodb/field"
  filter "github.com/xpwu/go-db-mongo/mongodb/filter"
  updater "github.com/xpwu/go-db-mongo/mongodb/updater"
  bson "go.mongodb.org/mongo-driver/bson"
)

type Wx1Field struct {
  *field.Array
}

func NewWx1Field(fName string) *Wx1Field {
  return &Wx1Field { field.NewArray(fName)}
}

func (i *Wx1Field) EleAt(index int) *Wx0Field {
  return NewWx0Field(fmt.Sprintf("%s.%d", i.FullName(), index))
}

// 数组的某一个元素，有时也可以理解为 数组的任何一个元素
func (i *Wx1Field) EleOne() *Wx0Field {
  return NewWx0Field(i.FullName())
}

// update 操作中被filter匹配的那第一个元素
func (i *Wx1Field) EleThat() *Wx0FieldUpdaterF {
  return NewWx0Field(i.FullName() + ".$").Wx0FieldUpdaterF
}

func (i *Wx1Field) EleAll() *Wx0FieldUpdaterF {
  return NewWx0Field(i.FullName() + ".$[]").Wx0FieldUpdaterF
}

func (i *Wx1Field) EleByFid(identifier string) *Wx0FieldUpdaterF {
  return NewWx0Field(fmt.Sprintf("%s.$[%s]", i.FullName(), i.FullName()+identifier)).Wx0FieldUpdaterF
}

func (i *Wx1Field) DeclFid(identifier string) *Wx0FieldFilterF {
  return NewWx0Field(i.FullName()+identifier).Wx0FieldFilterF
}

func (i *Wx1Field) Include(a []Wx) filter.Filter {
  return filter.New(i, "$all", a)
}

func (i *Wx1Field) Eq(a []Wx) filter.Filter {
  return filter.CompareByValue(i, filter.EQ, a)
}

func (i *Wx1Field) Set(a []Wx) updater.Updater {
  return updater.New(i, "$set", a)
}

func (i *Wx1Field) AddToSet(value Wx) updater.Updater {
  return updater.New(i, "$addToSet", value)
}

func (i *Wx1Field) AddToSetValues(a []Wx) updater.Updater {
  return updater.New(i, "$addToSet", bson.M{"$each":a})
}

func (i *Wx1Field) Pull(value Wx) updater.Updater {
  return updater.New(i, "$pull", value)
}

func (i *Wx1Field) PullAll(a []Wx) updater.Updater {
  return updater.New(i, "$pullAll", a)
}

func (i *Wx1Field) Push (value Wx) updater.Updater {
  return updater.New(i, "$push", value)
}

func (i *Wx1Field) PushByModifier(m updater.PushModifier, each []Wx) updater.Updater {
  return updater.PushByModifier(i, m, each)
}
