
package field

// ---- auto generated by builder.go, NOT modify this file ----

import (
  fmt "fmt"
  filter "github.com/xpwu/go-db-mongo/mongodb/filter"
  updater "github.com/xpwu/go-db-mongo/mongodb/updater"
  bson "go.mongodb.org/mongo-driver/bson"
)

type Int641Field struct {
  *Array
}

func NewInt641Field(fName string) *Int641Field {
  return &Int641Field { NewArray(fName)}
}

func (i *Int641Field) EleAt(index int) *Int640F {
  return NewInt640F(fmt.Sprintf("%s.%d", i.FullName(), index))
}

// 数组的某一个元素，有时也可以理解为 数组的任何一个元素
func (i *Int641Field) EleOne() *Int640F {
  return NewInt640F(i.FullName())
}

// update 操作中被filter匹配的那第一个元素
func (i *Int641Field) EleThat() *Int640FUpdaterF {
  return NewInt640F(i.FullName() + ".$").Int640FUpdaterF
}

func (i *Int641Field) EleAll() *Int640FUpdaterF {
  return NewInt640F(i.FullName() + ".$[]").Int640FUpdaterF
}

func (i *Int641Field) EleByFid(identifier string) *Int640FUpdaterF {
  return NewInt640F(fmt.Sprintf("%s.$[%s]", i.FullName(), i.FullName()+identifier)).Int640FUpdaterF
}

func (i *Int641Field) DeclFid(identifier string) *Int640FFilterF {
  return NewInt640F(i.FullName()+identifier).Int640FFilterF
}

func (i *Int641Field) Include(a []int64) filter.Filter {
  return filter.New(i, "$all", a)
}

func (i *Int641Field) Eq(a []int64) filter.Filter {
  return filter.CompareByValue(i, filter.EQ, a)
}

func (i *Int641Field) Set(a []int64) updater.Updater {
  return updater.New(i, "$set", a)
}

func (i *Int641Field) AddToSet(value int64) updater.Updater {
  return updater.New(i, "$addToSet", value)
}

func (i *Int641Field) AddToSetValues(a []int64) updater.Updater {
  return updater.New(i, "$addToSet", bson.M{"$each":a})
}

func (i *Int641Field) Pull(value int64) updater.Updater {
  return updater.New(i, "$pull", value)
}

func (i *Int641Field) PullAll(a []int64) updater.Updater {
  return updater.New(i, "$pullAll", a)
}

func (i *Int641Field) Push (value int64) updater.Updater {
  return updater.New(i, "$push", value)
}

func (i *Int641Field) PushByModifier(m updater.PushModifier, each []int64) updater.Updater {
  return updater.PushByModifier(i, m, each)
}
