package field

// ---- auto generated by builder.go, NOT modify this file ----

import (
	fmt "fmt"
	filter "github.com/findyu001/go-db-mongo/mongodb/filter"
	updater "github.com/findyu001/go-db-mongo/mongodb/updater"
	bson "go.mongodb.org/mongo-driver/bson"
)

type String1Field struct {
	*Array
}

func NewString1Field(fName string) *String1Field {
	return &String1Field{NewArray(fName)}
}

func (i *String1Field) EleAt(index int) *String0F {
	return NewString0F(fmt.Sprintf("%s.%d", i.FullName(), index))
}

// 数组的某一个元素，有时也可以理解为 数组的任何一个元素
func (i *String1Field) EleOne() *String0F {
	return NewString0F(i.FullName())
}

// update 操作中被filter匹配的那第一个元素
func (i *String1Field) EleThat() *String0FUpdaterF {
	return NewString0F(i.FullName() + ".$").String0FUpdaterF
}

func (i *String1Field) EleAll() *String0FUpdaterF {
	return NewString0F(i.FullName() + ".$[]").String0FUpdaterF
}

func (i *String1Field) EleByFid(identifier string) *String0FUpdaterF {
	return NewString0F(fmt.Sprintf("%s.$[%s]", i.FullName(), i.FullName()+identifier)).String0FUpdaterF
}

func (i *String1Field) DeclFid(identifier string) *String0FFilterF {
	return NewString0F(i.FullName() + identifier).String0FFilterF
}

func (i *String1Field) Include(a []string) filter.Filter {
	return filter.New(i, "$all", a)
}

func (i *String1Field) Eq(a []string) filter.Filter {
	return filter.CompareByValue(i, filter.EQ, a)
}

func (i *String1Field) Set(a []string) updater.Updater {
	return updater.New(i, "$set", a)
}

func (i *String1Field) AddToSet(value string) updater.Updater {
	return updater.New(i, "$addToSet", value)
}

func (i *String1Field) AddToSetValues(a []string) updater.Updater {
	return updater.New(i, "$addToSet", bson.M{"$each": a})
}

func (i *String1Field) Pull(value string) updater.Updater {
	return updater.New(i, "$pull", value)
}

func (i *String1Field) PullAll(a []string) updater.Updater {
	return updater.New(i, "$pullAll", a)
}

func (i *String1Field) Push(value string) updater.Updater {
	return updater.New(i, "$push", value)
}

func (i *String1Field) PushByModifier(m updater.PushModifier, each []string) updater.Updater {
	return updater.PushByModifier(i, m, each)
}
