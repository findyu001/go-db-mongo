
package field

// ---- auto generated by baseTypeBuilder_test.go, NOT modify this file ----

import (
  "github.com/xpwu/go-db-mongo/mongodb/filter"
  "github.com/xpwu/go-db-mongo/mongodb/updater"
  "go.mongodb.org/mongo-driver/bson"
  
)

type Int80F struct {
  *Int80FUpdaterF
  *baseKey
  *Int80FFilterF
}

func (a *Int80F) FullName() string {
  return a.baseKey.FullName()
}

type Int80FUpdaterF struct {
  *baseUpdater
}

type Int80FFilterF struct {
  *baseFilter
}

func NewInt80F(fName string) *Int80F {
  uper := &Int80FUpdaterF{&baseUpdater{&base{fName}}}
  pri := &baseKey{uper.base}
  flt := &Int80FFilterF{&baseFilter{uper.base}}

  return &Int80F{uper, pri, flt}
}


func (i *Int80FFilterF) Mod(divisor, remainder int8) filter.Filter {
 return filter.New(i, "$mod", bson.A{divisor, remainder})
}



func (i *Int80FUpdaterF) Inc(num int8) updater.Updater {
 return updater.New(i, "$inc", num)
}

func (i *Int80FUpdaterF) Mul(num int8) updater.Updater {
 return updater.New(i, "$mul", num)
}



func (i *Int80FFilterF) Eq(value int8) filter.Filter {
 return filter.CompareByValue(i, filter.EQ, value)
}

func (i *Int80FFilterF) Ne(value int8) filter.Filter {
 return filter.CompareByValue(i, filter.NE, value)
}

func (i *Int80FFilterF) NeField(f *Int80F) filter.Filter {
 return filter.CompareByField(i, filter.NE, f)
}

func (i *Int80FFilterF) EqField(f *Int80F) filter.Filter {
 return filter.CompareByField(i, filter.EQ, f)
}

func (i *Int80FFilterF) Gte(value int8) filter.Filter {
 return filter.CompareByValue(i, filter.GTE, value)
}

func (i *Int80FFilterF) Lte(value int8) filter.Filter {
 return filter.CompareByValue(i, filter.LTE, value)
}

func (i *Int80FFilterF) GteField(f *Int80F) filter.Filter {
 return filter.CompareByValue(i, filter.GTE, f)
}

func (i *Int80FFilterF) LteField(f *Int80F) filter.Filter {
 return filter.CompareByValue(i, filter.LTE, f)
}




func (i *Int80FFilterF) Gt(value int8) filter.Filter {
 return filter.CompareByValue(i, filter.GT, value)
}

func (i *Int80FFilterF) Lt(value int8) filter.Filter {
 return filter.CompareByValue(i, filter.LT, value)
}

func (i *Int80FFilterF) GtField(f *Int80F) filter.Filter {
 return filter.CompareByValue(i, filter.GT, f)
}

func (i *Int80FFilterF) LtField(f *Int80F) filter.Filter {
 return filter.CompareByValue(i, filter.LT, f)
}

func (i *Int80FFilterF) In(values []int8) filter.Filter {
 return filter.New(i, "$in", values)
}

func (i *Int80FFilterF) Nin(values []int8) filter.Filter {
 return filter.New(i, "$nin", values)
}

func (i *Int80FUpdaterF) Min(value int8) updater.Updater {
  return updater.New(i, "$min", value)
}

func (i *Int80FUpdaterF) Max(value int8) updater.Updater {
  return updater.New(i, "$max", value)
}

func (i *Int80FUpdaterF) Set(value int8) updater.Updater {
  return updater.New(i, "$set", value)
}

func (i *Int80FUpdaterF) SetOnIns(value int8) updater.Updater {
  return updater.New(i, "$setOnInsert", value)
}

