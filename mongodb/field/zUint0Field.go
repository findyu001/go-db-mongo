
package field

// ---- auto generated by baseTypeBuilder_test.go, NOT modify this file ----

import (
  "github.com/xpwu/go-db-mongo/mongodb/filter"
  "github.com/xpwu/go-db-mongo/mongodb/updater"
  "go.mongodb.org/mongo-driver/bson"
  
)

type Uint0F struct {
  *Uint0FUpdaterF
  *baseKey
  *Uint0FFilterF
}

func (a *Uint0F) FullName() string {
  return a.baseKey.FullName()
}

type Uint0FUpdaterF struct {
  *baseUpdater
}

type Uint0FFilterF struct {
  *baseFilter
}

func NewUint0F(fName string) *Uint0F {
  uper := &Uint0FUpdaterF{&baseUpdater{&base{fName}}}
  pri := &baseKey{uper.base}
  flt := &Uint0FFilterF{&baseFilter{uper.base}}

  return &Uint0F{uper, pri, flt}
}


func (i *Uint0FFilterF) Mod(divisor, remainder uint) filter.Filter {
 return filter.New(i, "$mod", bson.A{divisor, remainder})
}



func (i *Uint0FUpdaterF) Inc(num uint) updater.Updater {
 return updater.New(i, "$inc", num)
}

func (i *Uint0FUpdaterF) Mul(num uint) updater.Updater {
 return updater.New(i, "$mul", num)
}



func (i *Uint0FFilterF) Eq(value uint) filter.Filter {
 return filter.CompareByValue(i, filter.EQ, value)
}

func (i *Uint0FFilterF) Ne(value uint) filter.Filter {
 return filter.CompareByValue(i, filter.NE, value)
}

func (i *Uint0FFilterF) NeField(f *Uint0F) filter.Filter {
 return filter.CompareByField(i, filter.NE, f)
}

func (i *Uint0FFilterF) EqField(f *Uint0F) filter.Filter {
 return filter.CompareByField(i, filter.EQ, f)
}

func (i *Uint0FFilterF) Gte(value uint) filter.Filter {
 return filter.CompareByValue(i, filter.GTE, value)
}

func (i *Uint0FFilterF) Lte(value uint) filter.Filter {
 return filter.CompareByValue(i, filter.LTE, value)
}

func (i *Uint0FFilterF) GteField(f *Uint0F) filter.Filter {
 return filter.CompareByValue(i, filter.GTE, f)
}

func (i *Uint0FFilterF) LteField(f *Uint0F) filter.Filter {
 return filter.CompareByValue(i, filter.LTE, f)
}




func (i *Uint0FFilterF) Gt(value uint) filter.Filter {
 return filter.CompareByValue(i, filter.GT, value)
}

func (i *Uint0FFilterF) Lt(value uint) filter.Filter {
 return filter.CompareByValue(i, filter.LT, value)
}

func (i *Uint0FFilterF) GtField(f *Uint0F) filter.Filter {
 return filter.CompareByValue(i, filter.GT, f)
}

func (i *Uint0FFilterF) LtField(f *Uint0F) filter.Filter {
 return filter.CompareByValue(i, filter.LT, f)
}

func (i *Uint0FFilterF) In(values []uint) filter.Filter {
 return filter.New(i, "$in", values)
}

func (i *Uint0FFilterF) Nin(values []uint) filter.Filter {
 return filter.New(i, "$nin", values)
}

func (i *Uint0FUpdaterF) Min(value uint) updater.Updater {
  return updater.New(i, "$min", value)
}

func (i *Uint0FUpdaterF) Max(value uint) updater.Updater {
  return updater.New(i, "$max", value)
}

func (i *Uint0FUpdaterF) Set(value uint) updater.Updater {
  return updater.New(i, "$set", value)
}

func (i *Uint0FUpdaterF) SetOnIns(value uint) updater.Updater {
  return updater.New(i, "$setOnInsert", value)
}

