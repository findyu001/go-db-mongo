
package field

// ---- auto generated by builder.go, NOT modify this file ----

import (
  fmt "fmt"
  filter "github.com/xpwu/go-db-mongo/mongodb/filter"
  updater "github.com/xpwu/go-db-mongo/mongodb/updater"
  bson "go.mongodb.org/mongo-driver/bson"
  primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

type Binary1Field struct {
  *Array
}

func NewBinary1Field(fName string) *Binary1Field {
  return &Binary1Field { NewArray(fName)}
}

func (i *Binary1Field) EleAt(index int) *Binary0F {
  return NewBinary0F(fmt.Sprintf("%s.%d", i.FullName(), index))
}

// 数组的某一个元素，有时也可以理解为 数组的任何一个元素
func (i *Binary1Field) EleOne() *Binary0F {
  return NewBinary0F(i.FullName())
}

// update 操作中被filter匹配的那第一个元素
func (i *Binary1Field) EleThat() *Binary0FUpdaterF {
  return NewBinary0F(i.FullName() + ".$").Binary0FUpdaterF
}

func (i *Binary1Field) EleAll() *Binary0FUpdaterF {
  return NewBinary0F(i.FullName() + ".$[]").Binary0FUpdaterF
}

func (i *Binary1Field) EleByFid(identifier string) *Binary0FUpdaterF {
  return NewBinary0F(fmt.Sprintf("%s.$[%s]", i.FullName(), i.FullName()+identifier)).Binary0FUpdaterF
}

func (i *Binary1Field) DeclFid(identifier string) *Binary0FFilterF {
  return NewBinary0F(i.FullName()+identifier).Binary0FFilterF
}

func (i *Binary1Field) Include(a []primitive.Binary) filter.Filter {
  return filter.New(i, "$all", a)
}

func (i *Binary1Field) Eq(a []primitive.Binary) filter.Filter {
  return filter.CompareByValue(i, filter.EQ, a)
}

func (i *Binary1Field) Set(a []primitive.Binary) updater.Updater {
  return updater.New(i, "$set", a)
}

func (i *Binary1Field) AddToSet(value primitive.Binary) updater.Updater {
  return updater.New(i, "$addToSet", value)
}

func (i *Binary1Field) AddToSetValues(a []primitive.Binary) updater.Updater {
  return updater.New(i, "$addToSet", bson.M{"$each":a})
}

func (i *Binary1Field) Pull(value primitive.Binary) updater.Updater {
  return updater.New(i, "$pull", value)
}

func (i *Binary1Field) PullAll(a []primitive.Binary) updater.Updater {
  return updater.New(i, "$pullAll", a)
}

func (i *Binary1Field) Push (value primitive.Binary) updater.Updater {
  return updater.New(i, "$push", value)
}

func (i *Binary1Field) PushByModifier(m updater.PushModifier, each []primitive.Binary) updater.Updater {
  return updater.PushByModifier(i, m, each)
}
