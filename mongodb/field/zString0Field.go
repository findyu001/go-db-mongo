package field

// ---- auto generated by baseTypeBuilder_test.go, NOT modify this file ----

import (
	"github.com/findyu001/go-db-mongo/mongodb/filter"
	"github.com/findyu001/go-db-mongo/mongodb/updater"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type String0F struct {
	*String0FUpdaterF
	*baseKey
	*String0FFilterF
}

func (a *String0F) FullName() string {
	return a.baseKey.FullName()
}

type String0FUpdaterF struct {
	*baseUpdater
}

type String0FFilterF struct {
	*baseFilter
}

func NewString0F(fName string) *String0F {
	uper := &String0FUpdaterF{&baseUpdater{&base{fName}}}
	pri := &baseKey{uper.base}
	flt := &String0FFilterF{&baseFilter{uper.base}}

	return &String0F{uper, pri, flt}
}

func (i *String0FFilterF) Eq(value string) filter.Filter {
	return filter.CompareByValue(i, filter.EQ, value)
}

func (i *String0FFilterF) Ne(value string) filter.Filter {
	return filter.CompareByValue(i, filter.NE, value)
}

func (i *String0FFilterF) NeField(f *String0F) filter.Filter {
	return filter.CompareByField(i, filter.NE, f)
}

func (i *String0FFilterF) EqField(f *String0F) filter.Filter {
	return filter.CompareByField(i, filter.EQ, f)
}

func (i *String0FFilterF) Gte(value string) filter.Filter {
	return filter.CompareByValue(i, filter.GTE, value)
}

func (i *String0FFilterF) Lte(value string) filter.Filter {
	return filter.CompareByValue(i, filter.LTE, value)
}

func (i *String0FFilterF) GteField(f *String0F) filter.Filter {
	return filter.CompareByValue(i, filter.GTE, f)
}

func (i *String0FFilterF) LteField(f *String0F) filter.Filter {
	return filter.CompareByValue(i, filter.LTE, f)
}

func (i *String0FUpdaterF) Regex(regex primitive.Regex) filter.Filter {
	return filter.New(i, "$regex", regex)
}

func (i *String0FFilterF) Gt(value string) filter.Filter {
	return filter.CompareByValue(i, filter.GT, value)
}

func (i *String0FFilterF) Lt(value string) filter.Filter {
	return filter.CompareByValue(i, filter.LT, value)
}

func (i *String0FFilterF) GtField(f *String0F) filter.Filter {
	return filter.CompareByValue(i, filter.GT, f)
}

func (i *String0FFilterF) LtField(f *String0F) filter.Filter {
	return filter.CompareByValue(i, filter.LT, f)
}

func (i *String0FFilterF) In(values []string) filter.Filter {
	return filter.New(i, "$in", values)
}

func (i *String0FFilterF) Nin(values []string) filter.Filter {
	return filter.New(i, "$nin", values)
}

func (i *String0FUpdaterF) Min(value string) updater.Updater {
	return updater.New(i, "$min", value)
}

func (i *String0FUpdaterF) Max(value string) updater.Updater {
	return updater.New(i, "$max", value)
}

func (i *String0FUpdaterF) Set(value string) updater.Updater {
	return updater.New(i, "$set", value)
}

func (i *String0FUpdaterF) SetOnIns(value string) updater.Updater {
	return updater.New(i, "$setOnInsert", value)
}
