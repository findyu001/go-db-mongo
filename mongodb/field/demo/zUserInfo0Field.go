
package demo

// ---- auto generated by builder.go, NOT modify this file ----

import (
  field "github.com/xpwu/go-db-mongo/mongodb/field"
)

type UserInfo0FieldUpdaterF struct {
  *baseUserInfo0Field
  *field.StructUpdaterF
}

func (s *UserInfo0FieldUpdaterF) FullName() string {
  return s.name
}

type UserInfo0FieldFilterF struct {
  *baseUserInfo0Field
  *field.StructFilterF
}

func (s *UserInfo0FieldFilterF) FullName() string {
  return s.name
}

type UserInfo0Field struct {
  *baseUserInfo0Field
  UserInfo0FieldUpdaterF  *UserInfo0FieldUpdaterF
  UserInfo0FieldFilterF   *UserInfo0FieldFilterF
}

func NewUserInfo0Field(fName string) *UserInfo0Field {
  base := &baseUserInfo0Field{fName}
  // 没有name时，不能做updater与filter操作，比如最顶层的Struct
  if fName == "" {
    return &UserInfo0Field {baseUserInfo0Field:base}
  }
  up := &UserInfo0FieldUpdaterF{base, field.NewStructUpdaterF(fName)}
  fl := &UserInfo0FieldFilterF{base, field.NewStructFilterF(fName)}

  return &UserInfo0Field {base, up, fl}
}

// 对应于 bson struct 中的 inline 修饰符
func NewUserInfo0FieldInline(fName string) *UserInfo0Field {
  return &UserInfo0Field {baseUserInfo0Field: &baseUserInfo0Field{fName}}
}

func (s *UserInfo0Field) FullName() string {
  return s.name
}

type baseUserInfo0Field struct {
  name      string
}

func (s *baseUserInfo0Field) Login() *field.Int0F {
  n := field.StructNext(s.name, "Login")
  return field.NewInt0F(n)
}

func (s *baseUserInfo0Field) Pass() *field.Int1Field {
  n := field.StructNext(s.name, "Pass")
  return field.NewInt1Field(n)
}

func (s *baseUserInfo0Field) Wx() *Wx0Field {
  n := field.StructNext(s.name, "Wx")
  return NewWx0Field(n)
}

func (s *baseUserInfo0Field) Ws() *Wx1Field {
  n := field.StructNext(s.name, "Ws")
  return NewWx1Field(n)
}

func (s *baseUserInfo0Field) Pass2() *field.Int161Field {
  n := field.StructNext(s.name, "Pass2")
  return field.NewInt161Field(n)
}

