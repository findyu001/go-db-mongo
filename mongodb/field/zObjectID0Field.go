
package field

// ---- auto generated by baseTypeBuilder_test.go, NOT modify this file ----

import (
  "github.com/xpwu/go-db-mongo/mongodb/filter"
  "github.com/xpwu/go-db-mongo/mongodb/updater"
  
  "go.mongodb.org/mongo-driver/bson/primitive"
)

type ObjectID0F struct {
  *ObjectID0FUpdaterF
  *baseKey
  *ObjectID0FFilterF
}

func (a *ObjectID0F) FullName() string {
  return a.baseKey.FullName()
}

type ObjectID0FUpdaterF struct {
  *baseUpdater
}

type ObjectID0FFilterF struct {
  *baseFilter
}

func NewObjectID0F(fName string) *ObjectID0F {
  uper := &ObjectID0FUpdaterF{&baseUpdater{&base{fName}}}
  pri := &baseKey{uper.base}
  flt := &ObjectID0FFilterF{&baseFilter{uper.base}}

  return &ObjectID0F{uper, pri, flt}
}






func (i *ObjectID0FFilterF) Eq(value primitive.ObjectID) filter.Filter {
 return filter.CompareByValue(i, filter.EQ, value)
}

func (i *ObjectID0FFilterF) Ne(value primitive.ObjectID) filter.Filter {
 return filter.CompareByValue(i, filter.NE, value)
}

func (i *ObjectID0FFilterF) NeField(f *ObjectID0F) filter.Filter {
 return filter.CompareByField(i, filter.NE, f)
}

func (i *ObjectID0FFilterF) EqField(f *ObjectID0F) filter.Filter {
 return filter.CompareByField(i, filter.EQ, f)
}

func (i *ObjectID0FFilterF) Gte(value primitive.ObjectID) filter.Filter {
 return filter.CompareByValue(i, filter.GTE, value)
}

func (i *ObjectID0FFilterF) Lte(value primitive.ObjectID) filter.Filter {
 return filter.CompareByValue(i, filter.LTE, value)
}

func (i *ObjectID0FFilterF) GteField(f *ObjectID0F) filter.Filter {
 return filter.CompareByValue(i, filter.GTE, f)
}

func (i *ObjectID0FFilterF) LteField(f *ObjectID0F) filter.Filter {
 return filter.CompareByValue(i, filter.LTE, f)
}




func (i *ObjectID0FFilterF) Gt(value primitive.ObjectID) filter.Filter {
 return filter.CompareByValue(i, filter.GT, value)
}

func (i *ObjectID0FFilterF) Lt(value primitive.ObjectID) filter.Filter {
 return filter.CompareByValue(i, filter.LT, value)
}

func (i *ObjectID0FFilterF) GtField(f *ObjectID0F) filter.Filter {
 return filter.CompareByValue(i, filter.GT, f)
}

func (i *ObjectID0FFilterF) LtField(f *ObjectID0F) filter.Filter {
 return filter.CompareByValue(i, filter.LT, f)
}

func (i *ObjectID0FFilterF) In(values []primitive.ObjectID) filter.Filter {
 return filter.New(i, "$in", values)
}

func (i *ObjectID0FFilterF) Nin(values []primitive.ObjectID) filter.Filter {
 return filter.New(i, "$nin", values)
}

func (i *ObjectID0FUpdaterF) Min(value primitive.ObjectID) updater.Updater {
  return updater.New(i, "$min", value)
}

func (i *ObjectID0FUpdaterF) Max(value primitive.ObjectID) updater.Updater {
  return updater.New(i, "$max", value)
}

func (i *ObjectID0FUpdaterF) Set(value primitive.ObjectID) updater.Updater {
  return updater.New(i, "$set", value)
}

func (i *ObjectID0FUpdaterF) SetOnIns(value primitive.ObjectID) updater.Updater {
  return updater.New(i, "$setOnInsert", value)
}

