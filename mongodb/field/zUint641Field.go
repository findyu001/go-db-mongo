package field

// ---- auto generated by builder.go, NOT modify this file ----

import (
	fmt "fmt"
	filter "github.com/findyu001/go-db-mongo/mongodb/filter"
	updater "github.com/findyu001/go-db-mongo/mongodb/updater"
	bson "go.mongodb.org/mongo-driver/bson"
)

type Uint641Field struct {
	*Array
}

func NewUint641Field(fName string) *Uint641Field {
	return &Uint641Field{NewArray(fName)}
}

func (i *Uint641Field) EleAt(index int) *Uint640F {
	return NewUint640F(fmt.Sprintf("%s.%d", i.FullName(), index))
}

// 数组的某一个元素，有时也可以理解为 数组的任何一个元素
func (i *Uint641Field) EleOne() *Uint640F {
	return NewUint640F(i.FullName())
}

// update 操作中被filter匹配的那第一个元素
func (i *Uint641Field) EleThat() *Uint640FUpdaterF {
	return NewUint640F(i.FullName() + ".$").Uint640FUpdaterF
}

func (i *Uint641Field) EleAll() *Uint640FUpdaterF {
	return NewUint640F(i.FullName() + ".$[]").Uint640FUpdaterF
}

func (i *Uint641Field) EleByFid(identifier string) *Uint640FUpdaterF {
	return NewUint640F(fmt.Sprintf("%s.$[%s]", i.FullName(), i.FullName()+identifier)).Uint640FUpdaterF
}

func (i *Uint641Field) DeclFid(identifier string) *Uint640FFilterF {
	return NewUint640F(i.FullName() + identifier).Uint640FFilterF
}

func (i *Uint641Field) Include(a []uint64) filter.Filter {
	return filter.New(i, "$all", a)
}

func (i *Uint641Field) Eq(a []uint64) filter.Filter {
	return filter.CompareByValue(i, filter.EQ, a)
}

func (i *Uint641Field) Set(a []uint64) updater.Updater {
	return updater.New(i, "$set", a)
}

func (i *Uint641Field) AddToSet(value uint64) updater.Updater {
	return updater.New(i, "$addToSet", value)
}

func (i *Uint641Field) AddToSetValues(a []uint64) updater.Updater {
	return updater.New(i, "$addToSet", bson.M{"$each": a})
}

func (i *Uint641Field) Pull(value uint64) updater.Updater {
	return updater.New(i, "$pull", value)
}

func (i *Uint641Field) PullAll(a []uint64) updater.Updater {
	return updater.New(i, "$pullAll", a)
}

func (i *Uint641Field) Push(value uint64) updater.Updater {
	return updater.New(i, "$push", value)
}

func (i *Uint641Field) PushByModifier(m updater.PushModifier, each []uint64) updater.Updater {
	return updater.PushByModifier(i, m, each)
}
