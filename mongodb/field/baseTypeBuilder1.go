package field

import (
  "go.mongodb.org/mongo-driver/bson/primitive"
  "os"
  "reflect"
  "text/template"
)

func all1Types() []reflect.Type {
  return []reflect.Type{
    reflect.TypeOf([]int{}), reflect.TypeOf([]int8{}), reflect.TypeOf([]int16{}),
    reflect.TypeOf([]int32{}), reflect.TypeOf([]int64{}),
    reflect.TypeOf([]uint{}), reflect.TypeOf([]uint8{}), reflect.TypeOf([]uint16{}),
    reflect.TypeOf([]uint32{}), reflect.TypeOf([]uint64{}),
    reflect.TypeOf([]float32{}), reflect.TypeOf([]float64{}),
    reflect.TypeOf([]bool{}), reflect.TypeOf([]string{}),
    reflect.TypeOf([]primitive.Binary{}), reflect.TypeOf([]primitive.Decimal128{}),
  }
}

func buildAll1Field() {
  all1 := all1Types()

  builder := New()
  for _, t := range all1 {
    builder.ClearType(t)
  }

  for _, t := range all1 {
    builder.Build(t)
  }
}

func all1TypeNames() []string {
  all1 := all1Types()

  ret := make([]string, 0, len(all1))

  for _,t := range all1 {
    ret = append(ret, firstUpper(t.Elem().Name()))
  }

  return ret
}

//func tt(b *Builder) {
//  all1 := all1Types()
//
//  fieldTypes := []interface{} {
//    (*Int321Field)(nil),
//  }
//
//  fieldNews := []interface{}{
//    NewInt321Field,
//  }
//
//  for i,t := range all1 {
//    b.RegisterType(t, Type{
//      F:    reflect.TypeOf(fieldTypes[i]).Elem(),
//      NewF: NewTypByFunc(fieldNews[i]),
//    })
//  }
//}

func builderR1Code() *template.Template {
  return template.Must(template.New("baseCode").Parse(`
package field

// ---- auto generated by baseTypeBuilder_test.go, NOT modify this file ----

import (
  "reflect"
)

func init() {
  builderR1 = func(b *Builder) {
    all1 := all1Types()

    fieldTypes := []interface{} {
      {{- range .}}
      (*{{.}}1Field)(nil),
      {{- end}}
    }
  
    fieldNews := []interface{}{
      {{- range .}}
      New{{.}}1Field,
      {{- end}}
    }
  
    for i,t := range all1 {
      b.RegisterType(t, Type{
        F:    reflect.TypeOf(fieldTypes[i]).Elem(),
        NewF: NewTypByFunc(fieldNews[i]),
      })
    }
  }
}

`))
}

func build1Builder() {
  names := all1TypeNames()

  file, err := os.Create("zBuilderR1.go")
  if err != nil {
    panic(err)
  }

  err = builderR1Code().Execute(file, names)
  if err != nil {
    panic(err)
  }
}

// 生成全部1Field及相关的其他功能，此函数的执行借助了go提供的 Example 功能，具体见 "baseTypeBuilder_run_test.go"
func buildAll1() {
  buildAll1Field()
  build1Builder()
}
